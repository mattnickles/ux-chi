---
title: Grid
styles: [assets/styles/show-example]
---
h2 Overview
p.-text
  | Grids accelerate the development process by imposing a set of constraints that guide developers where to place elements
  | and how to size them. Adhering to the grid ensures no matter what Lumen webpage or application customers use, they
  | are provided with a consistent and familiar experience.

h2 Layout Grid
p.-text Lux includes a responsive mobile-first 12-column layout grid. Built on the flexbox standards, the Lux layout grid allows for complex layouts with minimal markup and styles.

h3 Breakpoints
div(style="overflow-x:auto;").-mb--3
  table.lux-table.-bordered
    thead
      tr
        th Device
        th Breakpoint range (px)
        th Breakpoint size
        th Columns
        th Gutters (px)
    tbody
      tr
        td Phone (portrait)
        td 0 - 575
        td
          code xs
        td 12
        td 16
      tr
        td Tablet (portrait)
        td 575 - 767
        td
          code sm
        td 12
        td 16
      tr
        td Tablet (landscape)
        td 768 - 991
        td
          code md
        td 12
        td 24
      tr
        td Laptop/Desktop (small)
        td 992 - 1200
        td
          code lg
        td 12
        td 24
      tr
        td Laptop/Desktop
        td 1200+
        td
          code xl
        td 12
        td 24

h3 Automatic Layout

p.-text Grid layouts are defined as a grid container that is composed of one or more rows of columns. By default, columns within a grid container will occupy an equal amount of horizontal space. Content within those columns is constrained to the width of the column (i.e. the column will not widen to accommodate its contents).

.lux-grid.-mb--3.-show--example
  .lux-col
  .lux-col
  .lux-col

.-mb--4.-mt--2
  :code(lang="html")
    <!-- three columns of equal width -->
    <div class="lux-grid">
      <div class="lux-col"></div>
      <div class="lux-col"></div>
      <div class="lux-col"></div>
    </div>

.lux-grid.-show--example
  .lux-col
  .lux-col
  .lux-col
  .lux-col
  .lux-col

.-mb--4.-mt--2
  :code(lang="html")
    <!-- five columns of equal width -->
    <div class="lux-grid">
      <div class="lux-col"></div>
      <div class="lux-col"></div>
      <div class="lux-col"></div>
      <div class="lux-col"></div>
      <div class="lux-col"></div>
    </div>

h3 Removing Gutters

p.-text Columns are rendered with a consistent amount of spacing between them. To collapse these margins, you may use the <code>-no-gutter</code> modifier class on the grid container.

.lux-grid.-no-gutter.-show--example
  .lux-col
  .lux-col
  .lux-col

.-mb--4.-mt--2
  :code(lang="html")
    <!-- grid container with collapsed margins -->
    <div class="lux-grid -no-gutter">
      <div class="lux-col"></div>
      <div class="lux-col"></div>
      <div class="lux-col"></div>
    </div>

h2 Customizing Grid Layouts

p.-text While automatic layout suits many use cases, you will likely need to create more specific and predictable layouts based on your requirements.

h3 Column Sizing

p.-text You can specify the amount of horizontal space that a column may consume by adding size classes to your column markup. For example, to create a layout with one column taking up 25% of the available space and the second other column taking up 75% of the space, you can add <code>-w--3</code> and <code>-w--9</code> to your each column, respectively:

.lux-grid.-show--example
  .lux-col.-w--3
  .lux-col.-w--9

.-mb--4.-mt--2
  :code(lang="html")
    <div class="lux-grid">
      <div class="lux-col -w--3"></div>
      <div class="lux-col -w--9"></div>
    </div>

p.-text Remember that the grid system consists of 12 columns, so each column unit is approximately 8.3% in width. So, to achieve this layout we are using 3 grid column units (1 unit * 3, or 8.3% * 3) to claim 25% of the width for the first column.

h3 Mixing Column Sizes w/Automatic Layout

p.-text When specifying a column size, it is often not necessary to assign an explicit size to each column. In the case above, we could have easily omitted the <code>-w--9</code> size class from the second column and the layout would remain the same.
p.-text For example, if we wanted to create a layout with 3 columns where the left and right columns are fixed in width and the middle column is flexible based on the amount of available space, we would end up with the following:

.lux-grid.-show--example
  .lux-col.-w--2
  .lux-col
  .lux-col.-w--2

.-mb--4.-mt--2
  :code(lang="html")
    <div class="lux-grid">
      <div class="lux-col -w--2"></div>
      <div class="lux-col"></div>
      <div class="lux-col -w--2"></div>
    </div>

p.-text Any columns that do not have an explicit size class associated with them will simply consume an equal amount of the leftover avaible space.

h3 Available Column Sizes

p.-text The size classes are defined from <code>-w--1</code>, which takes up ~8.3% of the width to <code>-w--12</code>, which consumes the entire row.
.lux-grid.-show--example.-mb--3
  .lux-col.-w--12
.lux-grid.-show--example.-mb--3
  .lux-col.-w--11
.lux-grid.-show--example.-mb--3
  .lux-col.-w--10
.lux-grid.-show--example.-mb--3
  .lux-col.-w--9
.lux-grid.-show--example.-mb--3
  .lux-col.-w--8
.lux-grid.-show--example.-mb--3
  .lux-col.-w--7
.lux-grid.-show--example.-mb--3
  .lux-col.-w--6
.lux-grid.-show--example.-mb--3
  .lux-col.-w--5
.lux-grid.-show--example.-mb--3
  .lux-col.-w--4
.lux-grid.-show--example.-mb--3
  .lux-col.-w--3
.lux-grid.-show--example.-mb--3
  .lux-col.-w--2
.lux-grid.-show--example.-mb--3
  .lux-col.-w--1

h3 Column Wrapping

p.-text Grid containers can accommodate any number of columns, however, the grid system is restricted to a maximum of 12 column units per row. Overflowing the 12 column units will automatically wrap additional columns onto a new row. For example, the following layout is the result of having 24 column units in a single container:

.lux-grid.-show--example
  .lux-col.-w--3
  .lux-col.-w--3
  .lux-col.-w--3
  .lux-col.-w--3
  .lux-col.-w--6
  .lux-col.-w--6

.-mb--4.-mt--2
  :code(lang="html")
    <div class="lux-grid">

      <!-- first 12 column units -->
      <div class="lux-col -w--3"></div>
      <div class="lux-col -w--3"></div>
      <div class="lux-col -w--3"></div>
      <div class="lux-col -w--3"></div>

      <!-- ... and another row consisting of 12 more units -->
      <div class="lux-col -w--6"></div>
      <div class="lux-col -w--6"></div>

    </div>

h3 Offset Positioning of Columns

p.-text You may position columns with an offset of one or more column units by specifying an offset size class on your column.

.lux-grid.-show--example.-mb--3
  .lux-col.-w--5.-o--1
  .lux-col.-w--3.-o--3

.-mb--4.-mt--2
  :code(lang="html")
    <div class="lux-grid">
      <div class="lux-col -w--5 -o--1"></div>
      <div class="lux-col -w--3 -o--3"></div>
    </div>

h4 Available Offset Sizes

p.-text Offset sizes, like column sizes, range from <code>-o--1</code>, which takes up ~8.3% of the width to <code>-o--11</code>, which consumes ~91.6% of the row.

.lux-grid.-show--example.-mb--3
  .lux-col.-o--1
.lux-grid.-show--example.-mb--3
  .lux-col.-o--2
.lux-grid.-show--example.-mb--3
  .lux-col.-o--3
.lux-grid.-show--example.-mb--3
  .lux-col.-o--4
.lux-grid.-show--example.-mb--3
  .lux-col.-o--5
.lux-grid.-show--example.-mb--3
  .lux-col.-o--6
.lux-grid.-show--example.-mb--3
  .lux-col.-o--7
.lux-grid.-show--example.-mb--3
  .lux-col.-o--8
.lux-grid.-show--example.-mb--3
  .lux-col.-o--9
.lux-grid.-show--example.-mb--3
  .lux-col.-o--10
.lux-grid.-show--example.-mb--3
  .lux-col.-o--11

h3 Reordering Columns

p.-text To display a column or columns in an order that is different than that which they appear in the markup, you may apply a reordering modifier class.

.test-reordering.-w--100
  .lux-grid.-show--example
    .lux-col.-n--3
    .lux-col.-n--1
    .lux-col.-n--2

.-mb--4.-mt--2
  :code(lang="html")
    <div class="lux-grid">
      <div class="lux-col -n--3"></div> <!-- displayed last -->
      <div class="lux-col -n--1"></div> <!-- displayed first -->
      <div class="lux-col -n--2"></div> <!-- displayed between -->
    </div>

h2 Responsive Layout

p.-text Lux defines 5 different viewports: XS, SM, MD, LG and XL. By default, columns in a grid container behave the same across viewport sizes. You will often want to change the layout based on the user's current viewport. You may accomplish this by setting viewport-specific classes to each of your columns that denote sizing or layout preferences for the viewport or viewports you are concerned with changing.
p.-text It is important to note that viewport-specific classes apply to their respective viewport and any larger viewport (unless overridden by a larger viewport class). For example, specifying <code>-w-md--6</code> would apply a width of 6 units to the column in MD, LG and XL viewports.

.lux-alert.-info.-my--3
  i.lux-alert__icon.lux-icon.icon-circle-info
  .lux-alert__content
    p.lux-alert__text Try resizing your browser window to see the following examples in action as you change the viewport size.


h3 Viewport-Specific Column Sizing

p.-text The columns in the following rows will be 50% wide until they are in the configured viewport, at which point they will become 12 column units wide.

.lux-grid.-show--example.-mb--3
  .lux-col.-w--6.-w-sm--12

.lux-grid.-show--example.-mb--3
  .lux-col.-w--6.-w-md--12

.lux-grid.-show--example.-mb--3
  .lux-col.-w--6.-w-lg--12

.lux-grid.-show--example.-mb--3
  .lux-col.-w--6.-w-xl--12

.-mb--4.-mt--2
  :code(lang="html")
    <!-- 50% on xs viewports; 100% on sm, md, lg and xl viewports -->
    <div class="lux-grid">
      <div class="lux-col -w--6 -w-sm--12"></div>
    </div>

    <!-- 50% on xs and sm viewports; 100% on md, lg and xl viewports -->
    <div class="lux-grid">
      <div class="lux-col -w--6 -w-md--12"></div>
    </div>

    <!-- 50% on xs, sm and md viewports; 100% on lg and xl viewports -->
    <div class="lux-grid">
      <div class="lux-col -w--6 -w-lg--12"></div>
    </div>

    <!-- 50% on xs, sm, md and lg viewports; 100% on xl viewports -->
    <div class="lux-grid">
      <div class="lux-col -w--6 -w-xl--12"></div>
    </div>

h3 Column Stacking

p.-text On extra small (xs) viewports you can make columns stack by specifying the column with the <code>-w-sm</code> or any <code>-w-sm--*</code> size modifier classes. Columns will start out stacked until viewed in the small viewport, at which point they will display horizontally in the row according to automatic layout or its assigned viewport size class.

.lux-grid.-show--example.-mb--3
  .lux-col.-w-sm--2
  .lux-col.-w-sm--4
  .lux-col.-w-sm
.lux-grid.-show--example.-mb--3
  .lux-col.-w-sm
  .lux-col.-w-sm
  .lux-col.-w-sm

.-mb--4.-mt--2
  :code(lang="html")
    <div class="lux-grid">
      <div class="lux-col -w-sm--2"></div>
      <div class="lux-col -w-sm--4"></div>
      <div class="lux-col -w-sm"></div>
    </div>

h3 Viewport-Specific Column Offsets

p.-text You may also use offsets on a per-viewport basis. For example, it may make sense to offset content on a desktop, but where space is limited on a mobile device you may want to have the content occupy more space. In the following example, the column will be offset by 50% when on medium viewports, but will not be offset on extra small or small viewports.

.lux-grid.-show--example.-mb--3
  .lux-col.-o-md--6

.-mb--4.-mt--2
  :code(lang="html")
    <div class="lux-grid">
      <div class="lux-col -o-md--6"></div>
    </div>

h2 Alignment

h3 Container-Level Vertical Alignment

p.-text Setting alignment on the grid container will apply to all columns within the container. Use this method if you do not need to change the vertical alignment for each individual column.

h4 -align--top

.lux-grid.-align--top.-show--example.-mb--3(style="height: 160px")
  .lux-col
  .lux-col
  .lux-col

.-mb--4.-mt--2
  :code(lang="html")
    <div class="lux-grid -align--top" style="height: 160px;">
      <div class="lux-col"></div>
      <div class="lux-col"></div>
      <div class="lux-col"></div>
    </div>

h4 -align--center

.lux-grid.-align--center.-show--example.-mb--3(style="height: 160px")
  .lux-col
  .lux-col
  .lux-col

.-mb--4.-mt--2
  :code(lang="html")
    <div class="lux-grid -align--center" style="height: 160px;">
      <div class="lux-col"></div>
      <div class="lux-col"></div>
      <div class="lux-col"></div>
    </div>

h4 -align--bottom

.lux-grid.-align--bottom.-show--example.-mb--3(style="height: 128px")
  .lux-col
  .lux-col
  .lux-col

.-mb--4.-mt--2
  :code(lang="html")
    <div class="lux-grid -align--bottom" style="height: 160px">
      <div class="lux-col"></div>
      <div class="lux-col"></div>
      <div class="lux-col"></div>
    </div>

h3 Column-Specific Vertical Alignment

p.-text Changing the alignment of an individual column is as easy as applying an alignment modifier to the column in question.

.lux-grid.-show--example.-mb--3(style="height: 160px")
  .lux-col.-align--top
  .lux-col.-align--center
  .lux-col.-align--bottom

.-mb--4.-mt--2
  :code(lang="html")
    <div class="lux-grid" style="height: 160px">
      <div class="lux-col -align--top"></div>
      <div class="lux-col -align--center"></div>
      <div class="lux-col -align--bottom"></div>
    </div>
